{"version":3,"file":"app.bundle.js","mappings":"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","sources":["webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/typeof.js","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/toPropertyKey.js","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/toPrimitive.js","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://safe-sum-utility/./scripts/app.ts","webpack://safe-sum-utility/./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack://safe-sum-utility/./scripts/safeSum.ts"],"sourcesContent":["export default function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}","import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}","import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}","import toPropertyKey from \"./toPropertyKey.js\";\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);\n  }\n}\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}","import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}","export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { safeSum, safeSubtract, safeProduct } from \"./safeSum.ts\";\r\nimport '../styles/app.scss';\r\n\r\nclass App {\r\n    private elFormAddition: HTMLFormElement | null = null;\r\n    private elFormMultiplication: HTMLFormElement | null = null;\r\n    \r\n    private elInputAddendOne: HTMLInputElement | null = null;\r\n    private elInputAddendTwo: HTMLInputElement | null = null;\r\n    private elInputFactorOne: HTMLInputElement | null = null;\r\n    private elInputFactorTwo: HTMLInputElement | null = null;\r\n\r\n    private elResultAddition: HTMLDivElement | null = null;\r\n    private elResultMultiplication: HTMLDivElement | null = null;\r\n    private elResultAdditionNative: HTMLDivElement | null = null;\r\n    private elResultMultiplicationNative: HTMLDivElement | null = null;\r\n    \r\n    constructor() {\r\n        \r\n    }\r\n\r\n    initialize() {\r\n        this.elFormAddition = document.getElementById('form-addition') as HTMLFormElement;\r\n        this.elFormMultiplication = document.getElementById('form-multiplication') as HTMLFormElement;\r\n        this.elInputAddendOne = document.getElementById('input-addend-one') as HTMLInputElement;\r\n        this.elInputAddendTwo = document.getElementById('input-addend-two') as HTMLInputElement;\r\n        this.elInputFactorOne = document.getElementById('input-factor-one') as HTMLInputElement;\r\n        this.elInputFactorTwo = document.getElementById('input-factor-two') as HTMLInputElement;\r\n        this.elResultAddition = document.getElementById('result-addition') as HTMLDivElement;\r\n        this.elResultAdditionNative = document.getElementById('result-addition-native') as HTMLDivElement;\r\n        this.elResultMultiplication = document.getElementById('result-multiplication') as HTMLDivElement;\r\n        this.elResultMultiplicationNative = document.getElementById('result-multiplication-native') as HTMLDivElement;\r\n\r\n        if (!this.elFormAddition || !this.elFormMultiplication) {\r\n            throw new Error('Bueler? Bueler?');\r\n        }\r\n\r\n\r\n        this.elFormAddition.onsubmit = (e: Event): boolean => {\r\n            e.preventDefault();\r\n\r\n            const addend1: number = Number(this.elInputAddendOne.value);\r\n            const addend2: number = Number(this.elInputAddendTwo.value);\r\n\r\n            this.elResultAddition.innerHTML = String(safeSum(addend1, addend2));\r\n            this.elResultAdditionNative.innerHTML = String(addend1 + addend2);\r\n\r\n            return false;\r\n        };\r\n\r\n        this.elFormMultiplication.onsubmit = (e: Event): boolean => {\r\n            e.preventDefault();\r\n\r\n            const factor1: number = Number(this.elInputFactorOne.value);\r\n            const factor2: number = Number(this.elInputFactorTwo.value);\r\n\r\n            this.elResultMultiplication.innerHTML = String(safeProduct(factor1, factor2));\r\n            this.elResultMultiplicationNative.innerHTML = String(factor1 * factor2);\r\n\r\n            return false;\r\n        };\r\n    };\r\n}\r\n\r\nconst app: App = new App();\r\napp.initialize();","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","// This custom utility is based on the research featured in \r\n// this article:\r\n// http://adripofjavascript.com/blog/drips/avoiding-problems-with-decimal-math-in-javascript.html\r\n\r\nexport function safeSum(num1: number, num2: number): number {\r\n    \r\n    if (isNaN(num1) || isNaN(num2)) {\r\n        alert('Entries must be numbers.');\r\n        return 0;\r\n    }\r\n\r\n    const numParts1: Array<string> = String(num1).split('.');\r\n    const numParts2: Array<string> = String(num2).split('.');\r\n    const fractionalPart1: string = numParts1[1] || '';\r\n    const fractionalPart2: string = numParts2[1] || '';\r\n    const integerPart1: string = numParts1[0];\r\n    const integerPart2: string = numParts2[0];\r\n\r\n    const precisionLength1: number = fractionalPart1.length;\r\n    const precisionLength2: number = fractionalPart2.length;\r\n    const lengthLongestPrecision: number = Math.max(precisionLength1, precisionLength2);\r\n\r\n    const intNoDecimal1: number = Number(String(num1).replace('.', '')); // this removes leading zeroes in 0.2 -> '02'\r\n    const intNoDecimal2: number = Number(String(num2).replace('.', '')); // same\r\n\r\n    let addend1: number = null;\r\n    let addend2: number | string = null;// COMBAK, make sure always number\r\n\r\n    if (precisionLength1 !== precisionLength2) {\r\n        // Flip equation based on precision length\r\n        let sFractionalPartWithAppendedZeroes: string = '';\r\n\r\n        if (lengthLongestPrecision === precisionLength1) {\r\n\r\n            addend1 = intNoDecimal1;\r\n            addend2 = integerPart2;\r\n            sFractionalPartWithAppendedZeroes = fractionalPart2;\r\n\r\n        } else if (lengthLongestPrecision === precisionLength2) {\r\n\r\n            addend1 = intNoDecimal2;\r\n            addend2 = integerPart1;\r\n            sFractionalPartWithAppendedZeroes = fractionalPart1;\r\n            \r\n        }\r\n\r\n        for (let i = 0, len = Math.abs(precisionLength1 - precisionLength2); i < len; i++) {\r\n            sFractionalPartWithAppendedZeroes = sFractionalPartWithAppendedZeroes + '0';\r\n        }\r\n\r\n        addend2 = Number(`${addend2}${sFractionalPartWithAppendedZeroes}`);\r\n\r\n    } else {\r\n\r\n        addend1 = intNoDecimal1;\r\n        addend2 = intNoDecimal2;\r\n\r\n    }\r\n\r\n    const result: number = addend1 + addend2;\r\n    const isResultNegative: boolean = result < 0;\r\n    let resultString: string = String(result);\r\n\r\n    if (isResultNegative) {\r\n        // REMOVE THE NEGATIVE SIGN TO GET AN ACCURATE STRING LENGTH COUNT\r\n        resultString = resultString.replace('-', '');\r\n    }\r\n\r\n    const arrNumberString: Array<string> = String(resultString).split('');\r\n    const insertIndex: number = resultString.length - lengthLongestPrecision;\r\n\r\n    if (insertIndex < 0) {\r\n        // ADD LEADING ZEROS TO MATCH PRECISION\r\n        for (let i = 0, len = Math.abs(insertIndex); i < len; i++) {\r\n            arrNumberString.unshift('0');\r\n        }\r\n\r\n        // INSERT INDEX CANNOT BE NEGATIVE\r\n        arrNumberString.splice(0, 0, '.');\r\n    } else {\r\n        arrNumberString.splice(insertIndex, 0, '.');\r\n    }\r\n\r\n    if (isResultNegative) {\r\n        // INCLUDE THE NEGATIVE SIGN IF NEEDED\r\n        arrNumberString.unshift('-');\r\n    }\r\n\r\n    return Number(arrNumberString.join(''));\r\n}\r\n\r\nexport function safeSubtract(num1: number, num2: number): number {\r\n    if (isNaN(num1) || isNaN(num2)) {\r\n        alert('Entries must be numbers.');\r\n        return 0;\r\n    }\r\n\r\n    return safeSum(num1, num2 * -1);\r\n}\r\n\r\nexport function safeProduct(num1: number, num2: number): number {\r\n    if (isNaN(num1) || isNaN(num2)) {\r\n        alert('Entries must be numbers.');\r\n        return 0;\r\n    }\r\n\r\n    const numParts1: Array<string> = String(num1).split('.');\r\n    const numParts2: Array<string> = String(num2).split('.');\r\n    const fractionalPart1: string = numParts1[1] || '';\r\n    const fractionalPart2: string = numParts2[1] || '';\r\n\r\n    // console.log([...numParts1, ...numParts2].join('').length);\r\n    // console.log([...numParts1, ...numParts2].join(''));\r\n    \r\n    if ([...numParts1, ...numParts2].join('').length > 22) {\r\n        // .23424 will insert a zero 0.23424 which becomes 023424\r\n        // adding more than 22 integers causes\r\n        // answer to go into expanded form triggering NaN\r\n        alert(`Combined entries cannot exceed 22 digits. Entered: ${[...numParts1, ...numParts2].join('').length}`);\r\n        return 0;\r\n    }\r\n    \r\n    const precisionLength1: number = fractionalPart1.length;\r\n    const precisionLength2: number = fractionalPart2.length;\r\n\r\n    const intNoDecimal1: number = Number(String(num1).replace('.', '')); // this removes leading zeroes in 0.2 -> '02'\r\n    const intNoDecimal2: number = Number(String(num2).replace('.', '')); // same\r\n\r\n    const factor1: number = intNoDecimal1;\r\n    const factor2: number = intNoDecimal2;\r\n\r\n    const result: number = factor1 * factor2;\r\n    const isResultNegative: boolean = result < 0;\r\n\r\n    let resultString: string = String(result);\r\n    const insertIndex: number = resultString.length - (precisionLength1 + precisionLength2);\r\n\r\n    if (isResultNegative) {\r\n        // REMOVE THE NEGATIVE SIGN TO GET AN ACCURATE STRING LENGTH COUNT\r\n        resultString = resultString.replace('-', '');\r\n    }\r\n\r\n    const arrNumberString: Array<string> = String(resultString).split('');\r\n\r\n    if (insertIndex < 0) {\r\n        // ADD LEADING ZEROS TO MATCH PRECISION\r\n        // INSERT INDEX CANNOT BE NEGATIVE, OR ELSE COUNTS BACKWARDS FROM LENGTH\r\n        for (let i = 0, len = Math.abs(insertIndex); i < len; i++) {\r\n            arrNumberString.unshift('0');\r\n        }\r\n\r\n        arrNumberString.splice(0, 0, '.');\r\n    } else {\r\n        arrNumberString.splice(insertIndex, 0, '.');\r\n    }\r\n\r\n    if (isResultNegative) {\r\n        // REPLACE THE NEGATIVE SIGN AS NEEDED\r\n        arrNumberString.unshift('-');\r\n    }\r\n\r\n    return Number(arrNumberString.join(''));\r\n}"],"names":["_typeof","obj","Symbol","iterator","constructor","prototype","_toPropertyKey","arg","key","input","hint","prim","toPrimitive","undefined","res","call","TypeError","String","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","_defineProperty","value","_arrayLikeToArray","arr","len","arr2","Array","_toConsumableArray","isArray","iter","from","o","minLen","n","toString","slice","name","test","App","instance","Constructor","_classCallCheck","protoProps","_this","this","elFormAddition","document","getElementById","elFormMultiplication","elInputAddendOne","elInputAddendTwo","elInputFactorOne","elInputFactorTwo","elResultAddition","elResultAdditionNative","elResultMultiplication","elResultMultiplicationNative","Error","onsubmit","e","preventDefault","addend1","Number","addend2","innerHTML","num1","num2","isNaN","alert","numParts1","split","numParts2","fractionalPart1","fractionalPart2","integerPart1","integerPart2","precisionLength1","precisionLength2","lengthLongestPrecision","Math","max","intNoDecimal1","replace","intNoDecimal2","sFractionalPartWithAppendedZeroes","abs","concat","result","isResultNegative","resultString","arrNumberString","insertIndex","unshift","splice","join","safeSum","factor1","factor2","safeProduct","initialize"],"sourceRoot":""}